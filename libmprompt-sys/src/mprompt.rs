/* automatically generated by rust-bindgen */

# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct mp_prompt_s { _unused : [u8 ; 0] , } pub type mp_prompt_t = mp_prompt_s ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct mp_resume_s { _unused : [u8 ; 0] , } pub type mp_resume_t = mp_resume_s ; pub type mp_start_fun_t = :: core :: option :: Option < unsafe extern "C" fn (arg1 : * mut mp_prompt_t , arg : * mut libc :: c_void) -> * mut libc :: c_void > ; pub type mp_yield_fun_t = :: core :: option :: Option < unsafe extern "C" fn (arg1 : * mut mp_resume_t , arg : * mut libc :: c_void) -> * mut libc :: c_void > ; extern "C" { # [link_name = "\u{1}_Z9mp_promptPFPvP11mp_prompt_sS_ES_"] pub fn mp_prompt (fun : mp_start_fun_t , arg : * mut libc :: c_void) -> * mut libc :: c_void ; } extern "C" { # [link_name = "\u{1}_Z8mp_yieldP11mp_prompt_sPFPvP11mp_resume_sS1_ES1_"] pub fn mp_yield (p : * mut mp_prompt_t , fun : mp_yield_fun_t , arg : * mut libc :: c_void) -> * mut libc :: c_void ; } extern "C" { # [link_name = "\u{1}_Z9mp_resumeP11mp_resume_sPv"] pub fn mp_resume (resume : * mut mp_resume_t , arg : * mut libc :: c_void) -> * mut libc :: c_void ; } extern "C" { # [link_name = "\u{1}_Z14mp_resume_tailP11mp_resume_sPv"] pub fn mp_resume_tail (resume : * mut mp_resume_t , arg : * mut libc :: c_void) -> * mut libc :: c_void ; } extern "C" { # [link_name = "\u{1}_Z14mp_resume_dropP11mp_resume_s"] pub fn mp_resume_drop (resume : * mut mp_resume_t) ; } extern "C" { # [link_name = "\u{1}_Z15mp_resume_multiP11mp_resume_s"] pub fn mp_resume_multi (r : * mut mp_resume_t) -> * mut mp_resume_t ; } extern "C" { # [link_name = "\u{1}_Z13mp_resume_dupP11mp_resume_s"] pub fn mp_resume_dup (r : * mut mp_resume_t) -> * mut mp_resume_t ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct mp_config_s { pub gpool_enable : bool , pub stack_grow_fast : bool , pub stack_use_overcommit : bool , pub stack_reset_decommits : bool , pub gpool_max_size : isize , pub stack_max_size : isize , pub stack_exn_guaranteed : isize , pub stack_initial_commit : isize , pub stack_gap_size : isize , pub stack_cache_count : isize , } # [test] fn bindgen_test_layout_mp_config_s () { assert_eq ! (:: core :: mem :: size_of :: < mp_config_s > () , 56usize , concat ! ("Size of: " , stringify ! (mp_config_s))) ; assert_eq ! (:: core :: mem :: align_of :: < mp_config_s > () , 8usize , concat ! ("Alignment of " , stringify ! (mp_config_s))) ; assert_eq ! (unsafe { & (* (:: core :: ptr :: null :: < mp_config_s > ())) . gpool_enable as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (mp_config_s) , "::" , stringify ! (gpool_enable))) ; assert_eq ! (unsafe { & (* (:: core :: ptr :: null :: < mp_config_s > ())) . stack_grow_fast as * const _ as usize } , 1usize , concat ! ("Offset of field: " , stringify ! (mp_config_s) , "::" , stringify ! (stack_grow_fast))) ; assert_eq ! (unsafe { & (* (:: core :: ptr :: null :: < mp_config_s > ())) . stack_use_overcommit as * const _ as usize } , 2usize , concat ! ("Offset of field: " , stringify ! (mp_config_s) , "::" , stringify ! (stack_use_overcommit))) ; assert_eq ! (unsafe { & (* (:: core :: ptr :: null :: < mp_config_s > ())) . stack_reset_decommits as * const _ as usize } , 3usize , concat ! ("Offset of field: " , stringify ! (mp_config_s) , "::" , stringify ! (stack_reset_decommits))) ; assert_eq ! (unsafe { & (* (:: core :: ptr :: null :: < mp_config_s > ())) . gpool_max_size as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (mp_config_s) , "::" , stringify ! (gpool_max_size))) ; assert_eq ! (unsafe { & (* (:: core :: ptr :: null :: < mp_config_s > ())) . stack_max_size as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (mp_config_s) , "::" , stringify ! (stack_max_size))) ; assert_eq ! (unsafe { & (* (:: core :: ptr :: null :: < mp_config_s > ())) . stack_exn_guaranteed as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (mp_config_s) , "::" , stringify ! (stack_exn_guaranteed))) ; assert_eq ! (unsafe { & (* (:: core :: ptr :: null :: < mp_config_s > ())) . stack_initial_commit as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (mp_config_s) , "::" , stringify ! (stack_initial_commit))) ; assert_eq ! (unsafe { & (* (:: core :: ptr :: null :: < mp_config_s > ())) . stack_gap_size as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (mp_config_s) , "::" , stringify ! (stack_gap_size))) ; assert_eq ! (unsafe { & (* (:: core :: ptr :: null :: < mp_config_s > ())) . stack_cache_count as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (mp_config_s) , "::" , stringify ! (stack_cache_count))) ; } pub type mp_config_t = mp_config_s ; extern "C" { # [link_name = "\u{1}_Z7mp_initPK11mp_config_s"] pub fn mp_init (config : * const mp_config_t) ; } extern "C" { # [link_name = "\u{1}_Z17mp_config_defaultv"] pub fn mp_config_default () -> mp_config_t ; } extern "C" { # [link_name = "\u{1}_Z12mp_backtracePPvi"] pub fn mp_backtrace (backtrace : * mut * mut libc :: c_void , len : libc :: c_int) -> libc :: c_int ; } extern "C" { # [link_name = "\u{1}_Z22mp_resume_resume_countP11mp_resume_s"] pub fn mp_resume_resume_count (r : * mut mp_resume_t) -> libc :: c_long ; } extern "C" { # [link_name = "\u{1}_Z23mp_resume_should_unwindP11mp_resume_s"] pub fn mp_resume_should_unwind (r : * mut mp_resume_t) -> libc :: c_int ; } extern "C" { # [link_name = "\u{1}_Z16mp_prompt_createv"] pub fn mp_prompt_create () -> * mut mp_prompt_t ; } extern "C" { # [link_name = "\u{1}_Z15mp_prompt_enterP11mp_prompt_sPFPvS0_S1_ES1_"] pub fn mp_prompt_enter (p : * mut mp_prompt_t , fun : mp_start_fun_t , arg : * mut libc :: c_void) -> * mut libc :: c_void ; } extern "C" { # [link_name = "\u{1}_Z13mp_prompt_topv"] pub fn mp_prompt_top () -> * mut mp_prompt_t ; } extern "C" { # [link_name = "\u{1}_Z16mp_prompt_parentP11mp_prompt_s"] pub fn mp_prompt_parent (p : * mut mp_prompt_t) -> * mut mp_prompt_t ; }